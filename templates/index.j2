<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="{{url_for('static', filename='favicon.ico')}}">
    <title>Object Detection</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .upload-area {
            border: 2px dashed #ddd;
            border-radius: 10px;
            padding: 40px;
            text-align: center;
            margin: 20px 0;
            cursor: pointer;
            transition: border-color 0.3s;
        }

        .upload-area:hover {
            border-color: #007bff;
        }

        .upload-area.dragover {
            border-color: #007bff;
            background-color: #f8f9fa;
        }

        .preview-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }

        .image-container {
            flex: 1;
            text-align: center;
        }

        .image-container img {
            max-width: 100%;
            max-height: 400px;
            border-radius: 8px;
            border: 1px solid #ddd;
        }

        .btn {
            background-color: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .btn:hover {
            background-color: #0056b3;
        }

        .btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #007bff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Car-Person Object Detection</h1>

    <div class="upload-area" id="uploadArea">
        <p>Click to select an image or drag and drop</p>
        <input type="file" id="imageInput" accept="image/*" style="display: none;">
    </div>

    <button class="btn" id="predictBtn" onclick="predict()" disabled>
        Detect Objects
    </button>

    <div class="loading" id="loading">
        <div class="spinner"></div>
        <p>Processing image...</p>
    </div>

    <div class="preview-container" id="previewContainer" style="display: none;">
        <div class="image-container">
            <h3>Original Image</h3>
            <img id="originalImage" alt="Original">
        </div>
        <div class="image-container">
            <h3>Detection Results</h3>
            <img id="resultImage" alt="Result">
        </div>
    </div>
</div>

<script>
    const uploadArea = document.getElementById('uploadArea');
    const imageInput = document.getElementById('imageInput');
    const predictBtn = document.getElementById('predictBtn');
    const loading = document.getElementById('loading');
    const previewContainer = document.getElementById('previewContainer');
    const originalImage = document.getElementById('originalImage');
    const resultImage = document.getElementById('resultImage');

    let selectedFile = null;

    uploadArea.addEventListener('click', () => imageInput.click());
    imageInput.addEventListener('change', handleFileSelect);

    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });
    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });
    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFile(files[0]);
        }
    });

    function handleFileSelect(e) {
        const file = e.target.files[0];
        if (file) {
            handleFile(file);
        }
    }

    function handleFile(file) {
        if (!file.type.startsWith('image/')) {
            alert('Please select an image file');
            return;
        }

        selectedFile = file;
        predictBtn.disabled = false;

        const reader = new FileReader();
        reader.onload = (e) => {
            originalImage.src = e.target.result;
            previewContainer.style.display = 'flex';
            resultImage.style.display = 'none';
        };
        reader.readAsDataURL(file);

        uploadArea.innerHTML = `<p>${file.name} selected</p>`;
    }

    async function predict() {
        if (!selectedFile) return;

        loading.style.display = 'block';
        predictBtn.disabled = true;

        const formData = new FormData();
        formData.append('image', selectedFile);

        try {
            const response = await fetch('/api/v1/predict', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const blob = await response.blob();
                resultImage.src = URL.createObjectURL(blob);
                resultImage.style.display = 'block';
            } else {
                const error = await response.json();
                alert(`Error: ${error.error}`);
            }
        } catch (error) {
            alert(`Error: ${error.message}`);
        } finally {
            loading.style.display = 'none';
            predictBtn.disabled = false;
        }
    }
</script>
</body>
</html>